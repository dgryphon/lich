require "ftools"
no_kill_all
no_pause_all
#hide_me

=begin
A passive script for tracking enchant temper times, it makes a note anytime you pour a temper potion on an item.
Add to favorites so that it's always running - ;fav add global enchantnotes.
Usage: ;enchants - will show list of current projects for all characters you have access to
by: Dgry (suggestions/bugs) dgry@hotmail.com
known bugs: 
=end


action = proc { |client_string|
	if client_string =~ /^(?:<c>)?#{$lich_char}((?:enchant).*)/i
		if scr = (Script.running + Script.hidden).find { |val| val.name == 'enchantnotes' }
			scr.downstream_buffer.shove("#{$clean_lich_char}#{$1}")
		else
			UpstreamHook.remove('enchantnotes')
		end
		nil
	else
		client_string
	end
}
UpstreamHook.add('enchantnotes', action)

class FileIO

	def initialize(title = nil)
		@Filename = $script_dir + "enchantnotes.csv"
	end
	
	def addNew(enchantList)
		echo "saving file"
		f = File.open(@Filename, "w")
		for proj in enchantList
			name, encItem, encItemID, calcTime, calcTime2, pouredDay = proj.split(",")
			if encItemID != ""
				f.puts proj
			end
		end
		f.close
		
	end

	def append(lineitem)
		tmp = File.open(@Filename, "a") { |f| f.puts lineitem}
		tmp.close
		respond
		respond "A note has been saved to enchantnotes file!"
		respond	
	end
	
	def read()
		file = File.open(@Filename, "r")
		x = Array.new()
		while (line = file.gets)
			#store into an array
			x << line			
		end
		file.close
		return x
	end
end

def formatData(proj)
	name, encItem, encItemID, calcTime, calcTime2, pouredDay = proj.split(",")
			if Time.now > Time.parse(calcTime2)
				ready = "#{monsterbold_start}Ready!#{monsterbold_end}\n"
			elsif Time.now > Time.parse(calcTime)
				ready = "Might be ready!"
			else
				ready = "Not ready."
			end
			readySoonestm = ([0, (Time.parse(calcTime) - Time.now) / (60) - 1].max % 60).round
			readySoonesth = ([0, (Time.parse(calcTime) - Time.now) / (60*60) -1].max % 24).round
			readySoonestd = ([0, (Time.parse(calcTime) - Time.now) / (24*60*60) ].max).round
			readyLatestm  = ([0, (Time.parse(calcTime2) - Time.now) / (60)-1].max % 60).round
 			readyLatesth  = ([0, (Time.parse(calcTime2) - Time.now) / (60*60)-1].max % 24).round 
			readyLatestd  = ([0, (Time.parse(calcTime2) - Time.now) / (24*60*60)].max).round 					
			return "#{name} is enchanting a #{encItem}, earliest: #{readySoonestd} days #{readySoonesth} hours #{readySoonestm} mins, latest: #{readyLatestd} days #{readyLatesth} hours #{readyLatestm} mins, status: #{ready}" 
 end
 
 def printList(enchantlist)
	respond 
	respond "-----------------Current Projects---------------"		
	counter = 1
	for proj in enchantlist
		respond counter.to_s+ " "+formatData(proj)
		counter = counter + 1
	end	
	respond "------------------------------------------------" 
	respond
 end


s = FileIO.new()

while line = get

#while msg = unique_get.strip

	if (line =~ /LNet/)
		#ignore data		
	elsif (line =~ /should be ready to enchant in about ([0-9]+) to ([0-9]+) (days|hours)?/)		
		daysleft = $1.to_i
		daysleft2 = $2.to_i
		hoursdays = $3.to_s
		if (hoursdays  =~ /day/)
			calcTime = Time.now + daysleft*24*60*60
			calcTime2 = Time.now + daysleft2*24*60*60
		else
			calcTime = Time.now + daysleft*60*60
			calcTime2 = Time.now + daysleft2*60*60			
		end
		if (GameObj.right_hand.name =~ /potion/ || righthand == nil && GameObj.left_hand.id != nil)
			encItem = GameObj.left_hand.name
			encItemID = GameObj.left_hand.id			
			s.append("#{Char.name},#{encItem},#{encItemID},#{calcTime},#{calcTime2},#{Time.now}")
		elsif (GameObj.right_hand.id != nil)
			encItem = GameObj.right_hand.name
			encItemID = GameObj.right_hand.id
			s.append("#{Char.name},#{encItem},#{encItemID},#{calcTime},#{calcTime2},#{Time.now}")
		end

	elsif line =~ /^#{$lich_char}enchant remove ([0-9]+)$/				
		delItem = $1.to_i		
		echo delItem.to_s
		enchantlist = s.read()
		enchantlist.delete_at(delItem-1)
		printList(enchantlist)
		s.addNew(enchantlist)
		
	elsif line =~ /^#{$lich_char}enchant clean$/		
		enchantlist = s.read()
		for proj in enchantlist		
			name, encItem3, encItemID2, calcTime, calcTime2, pouredDay = proj.split(",")
			
			# remove items > 30 days old
			deadline  = ((Time.parse(calcTime2) - Time.now) / (24*60*60)).round
			if (deadline < -30)			
				respond "A note for #{encItem3} was removed because the pour date was more than 30 days old."
				enchantlist.delete(proj)
				next
			end
			
			#remove items that appear invalid (nil/emptys)
			if (encItemID2 == nil || encItemID2 == "")
				enchantlist.delete(proj)
				respond "A note for #{encItem3} was removed because it appeared to be invalid."
				next
			end
			
			#remove items that appear invalid (nil/emptys)
			if (encItem3 == nil || encItem3 == "" || encItem3 == "Empty")			
				enchantlist.delete(proj)
				respond "A note for #{encItem3} was removed because it appeared to have an invalid name."
				next
			end
			
		end
		
		printList(enchantlist)
		s.addNew(enchantlist)

	elsif line =~ /^#{$lich_char}enchant help$/
		respond
		respond "A passive script for tracking enchant temper times, it makes a note anytime you pour a temper potion on an item."
		respond "Add to favorites so that it's always running - ;fav add global enchantnotes."
		respond "Usage: "
		respond ";enchants         - will show list of current projects for all characters you have access to."
		respond ";enchant help     - displays this help"
		respond ";enchant remove # - deletes one of your enchant projects from the file"
		respond ";enchant clean    - attempts to automatically clean up your enchant file with any projects that are more than 30 days old"
		respond ";enchant exit     - exits program"
		respond
		
	elsif line =~ /^#{$lich_char}enchant exit$/				
		UpstreamHook.remove('enchantnotes')
		exit
    elsif line =~ /^#{$lich_char}enchants$/	
		enchantlist = s.read()
		printList(enchantlist)
		
	elsif line =~ /your sure gestures guiding them to slowly coalesce into a pair of small softly glowing runic symbols|your sure gestures guiding them to slowly coalesce into small softly glowing runic symbols/                
		if GameObj.right_hand.name =~ /potion/ || righthand == nil
			encItem = GameObj.left_hand.name
			encItemID = GameObj.left_hand.id
		else
			encItem = GameObj.right_hand.name
			encItemID = GameObj.right_hand.id
		end
		enchantlist = s.read()
		counter = 1
		for proj in enchantlist		
			name, encItem3, encItemID2, calcTime, calcTime2, pouredDay = proj.split(",")
						
			if encItem == encItem3 && checkname = name
				
				# change to catch user input instead of using line
				line = nil
				respond
				echo "The following note will be removed in 10 seconds"
				echo counter.to_s+ " "+formatData(proj)
				counter = counter + 1
				echo ";send a to Abort"
				respond
				line = matchtimeout 10, /^a$/
				
				if line == false
					enchantlist.delete(proj)
					respond
					respond "A note for #{encItem3} was removed."
					respond			
					break
				end
			end
		end
				
		s.addNew(enchantlist)
		
	end
end

